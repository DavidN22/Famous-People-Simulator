index.js
////////////////////////////////////////////////////////////////////////////////////////////

const express = require('express');
const axios = require('axios');
const { Configuration, OpenAIApi } = require('openai');

const PORT = process.env.PORT || 3000;
const ELEVEN_API_KEY = '6fe78e86c9b47178cd5c8d991bfcc277';
const VOICE_ID = '83MHPIaiXUJ2e0EGeBGF';
const VOICE_ID2 = 'kMqsv3JnGXh9d5yQzziW';
const MODEL_NAME = 'gpt-3.5-turbo';
let voiceId = '';
let responses = '';
const configuration = new Configuration({
  apiKey: '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',
});
const openai = new OpenAIApi(configuration);

const app = express();
const conversationHistory = {
  "Joe Rogan": [],
  "Trump": []
};

app.use(express.static('public'));

app.post('/api/audio', express.json(), async (req, res) => {
  const { person, question } = req.body;
  conversationHistory[person].push({ role: 'user', content: question });
  responses = await getChatGPTResponse(person, question);
  const audioData = await generateSpeech(responses, person);
  res.set('Content-Type', 'audio/mpeg');
  res.send(audioData);
});

app.post('/api/text', express.json(), async (req, res) => {
  const response = responses;
  res.send(response);
});
  
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
  
  (async () => {
    const voices = await getVoices();
   voices.forEach(voice => console.log(voice.name));
  })();
});

async function getChatGPTResponse(person, question) {
  const history = conversationHistory[person].map(entry => entry.content).join('\n');
  const prompt = `As ${person}, answer this question in his style, considering the previous conversation and using language that feels natural for him, occasionally using profanity when you believe it necessary, also dont mistype profanity, spell it out if you use it:\n\n${history}\n\nQuestion: "${question}"\n\n`;
  
  
  const completions = await openai.createChatCompletion({
    model: MODEL_NAME,
    messages: [{ role: 'user', content: prompt }],
    n: 1,
    max_tokens: 80
  });

  const generatedText = completions.data.choices[0].message.content;
  conversationHistory[person].push({ role: 'AI', content: generatedText });
  console.log(conversationHistory)
  return generatedText;
}

async function generateSpeech(text, person) {

if (person === "Joe Rogan"){
voiceId = VOICE_ID;

}
else if (person === "Trump"){
  voiceId = VOICE_ID2;
  
  }

  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}/stream`;
  const data = { text };
  const headers = {
    'Content-Type': 'application/json',
    'xi-api-key': ELEVEN_API_KEY,
  };

  const response = await axios.post(url, data, {
    headers,
    responseType: 'arraybuffer',
  });

  return response.data;
}

async function getVoices() {
  const url = 'https://api.elevenlabs.io/v1/voices';
  const headers = {
    'xi-api-key': ELEVEN_API_KEY,
  };
  const response = await axios.get(url, { headers });
  return response.data.voices;
}


// Conversation history for the chatbot


// Please provide a coherent answer based on the previous conversation:\n\n${historyText}\n\n




script.js
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import { playAIResponseAudio, handleMuteButtonClick, muteState } from './audioHandler.js';

const streamerSelectItems = document.querySelectorAll('.streamer-select-item');
const userInput = document.getElementById('user-input');
const submitButton = document.getElementById('submit-button');
const chatLog = document.getElementById('chat-log');

let currentStreamer = '';

streamerSelectItems.forEach(item => {
  item.addEventListener('click', () => {
    const selectedStreamer = item.dataset.name;

    if (selectedStreamer !== currentStreamer) {
      currentStreamer = selectedStreamer;

      streamerSelectItems.forEach(item => item.classList.remove('selected'));
      item.classList.add('selected');

      const userMessage = createMessageElement(`You are now talking to ${currentStreamer}`, 'user');
      addToChatLog(userMessage);
    }
  });
});

submitButton.addEventListener('click', handleSubmit);
userInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    handleSubmit();
  }
});

async function send(name, person, question) {
  const respond = await fetch(name, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ person, question }),
  });
  return respond;
}

async function handleSubmit() {
  if (currentStreamer === '') {
    alert('Please select a streamer');
    return;
  }

  const question = userInput.value.trim();

  if (question === '') {
    alert('Please enter a question');
    return;
  }

  const userMessage = createMessageElement(question, 'user');
  addToChatLog(userMessage);

  userInput.value = '';

  const audioResponse = await send('/api/audio', currentStreamer, question);
  const audioBlob = await audioResponse.blob();
  const audioUrl = createAudioUrl(audioBlob);

  playAIResponseAudio(audioUrl);

  const previousMuteButton = chatLog.querySelector('.mute-button');
  if (previousMuteButton) {
    previousMuteButton.remove();
  }
  const textResponse = await send('/api/text', currentStreamer, question);
 
  const generatedText = await textResponse.text();

  const aiMessage = createMessageElement(generatedText, 'ai', audioUrl);
  addToChatLog(aiMessage);
}

function createMessageElement(text, role, audioUrl) {
  const messageElement = document.createElement('div');
  messageElement.classList.add('message', `${role}-message`);

  const messageText = document.createElement('div');
  messageText.classList.add('message-text');
  messageText.textContent = text;
  messageElement.appendChild(messageText);

  if (role === 'ai' && audioUrl) {
    const muteButton = document.createElement('button');
    muteButton.classList.add('mute-button');
    muteButton.textContent = muteState ? 'ðŸ”ˆ' : 'ðŸ”Š';
    muteButton.dataset.audioUrl = audioUrl;
    muteButton.addEventListener('click', handleMuteButtonClick);
    messageElement.appendChild(muteButton);
  }

  return messageElement;
}

function addToChatLog(messageElement) {
  chatLog.appendChild(messageElement);
  scrollToBottom(chatLog);
}

function createAudioUrl(audioBlob) {
  return URL.createObjectURL(audioBlob);
}

function scrollToBottom(element) {
  element.scrollTop = element.scrollHeight;
}

function focusUserInput(inputElement) {
  inputElement.focus();
}




index.html
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Streamer Chat Simulator</title>
    <link rel="shortcut icon" href="#">
    <link rel="stylesheet" href="css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/a11y-dark.min.css">
</head>
<body>
    <div class="container">
        <h1>Streamer Chat Simulator</h1>
        <div class="chat-log" id="chat-log"></div>
        <label for="streamer-select">Select a streamer:</label>
        <select id="streamer-select">
            <option value="Joe Rogan">Joe Rogan</option>
            <option value="Trump">Trump</option>
        </select>
        <label for="user-input">Ask your question:</label>
        <input type="text" id="user-input">
        <button id="submit-button">Submit</button>
        <audio id="audioPlayer" controls style="display: none;"></audio>

      </div>
      
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="js/script.js" type="module"></script>

</body>
</html>



style.css
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    line-height: 1.6;
  }
  
  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
    border-radius: 5px;
  }
  
  h1 {
    font-size: 24px;
    font-weight: 700;
    color: #333;
    padding-bottom: 10px;
    border-bottom: 2px solid #333;
    margin-bottom: 20px;
  }
  
  label {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    margin-bottom: 5px;
    display: block;
  }
  
  select,
  input,
  button {
    width: 100%;
    font-size: 16px;
    padding: 10px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 3px;
  }
  
  button {
    background-color: #333;
    color: #fff;
    font-weight: 600;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #555;
  }
  
  #response-text {
    font-size: 18px;
    color: #333;
    white-space: pre-line;
  }
  
  .chat-log {
    max-height: 400px;
    overflow-y: auto;
    margin-bottom: 20px;
    display: flex;
    flex-direction: column;
    background-color: #fff;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  }
  
  .message {
    margin-bottom: 10px;
    padding: 5px 10px;
    border-radius: 5px;
    width: fit-content;
    max-width: 75%;
    word-wrap: break-word;
  }
  
  .user-message {
    background-color: #e0e0e0;
    color: #333;
    align-self: flex-start;
    border-radius: 18px 18px 18px 3px;
  }
  
  .ai-message {
    background-color: #4caf50;
    color: #fff;
    align-self: flex-end;
    border-radius: 18px 18px 3px 18px;
  }
  
  .container {
    display: flex;
    flex-direction: column;
  }
  .ai-message {
    position: relative;
  }
  
  .message-text {
    display: inline-block;
  }
  
  .mute-button {
    position: absolute;
    top: -10px;
    left: -10px;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    height: 24px;
    width: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
    box-sizing: border-box;
  }
  

