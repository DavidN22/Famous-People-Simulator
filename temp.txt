const express = require('express');
const axios = require('axios');
const { Configuration, OpenAIApi } = require('openai');

const PORT = process.env.PORT || 3000;
const ELEVEN_API_KEY = 'a300c340df1b2ca8bab8779c429342f9';
const VOICE_ID = 'H1SRIgfgh2s0Of1kDI1S';
const VOICE_ID2 = 'VItfB9W7amihgogU5qRj';
const MODEL_NAME = 'gpt-3.5-turbo';
let key = true;
let voiceId = '';
let responses = '';
const configuration = new Configuration({
  apiKey: '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',
});
const openai = new OpenAIApi(configuration);

const app = express();
const conversationHistory = {
  "Joe Rogan": [],
  "Trump": []
};

app.use(express.static('public'));

app.post('/api/audio', express.json(), async (req, res) => {
  
  const { person, question } = req.body;
  conversationHistory[person].push({ role: 'user', content: question });
  responses = await getChatGPTResponse(person, question);
  const audioData = await generateSpeech(responses, person);
  res.set('Content-Type', 'audio/mpeg');
  res.send(audioData);

});

app.post('/api/text', express.json(), async (req, res) => {

  res.send(responses);
});
  
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
  
  (async () => {
    const voices = await getVoices();
   voices.forEach(voice => console.log(voice.name));
  })();
});

async function getChatGPTResponse(person, question) {
  let prompt = '';
  
  const history = conversationHistory[person].map(entry => entry.content).join('\n');
  const overallHistory = conversationHistory[person].map(entry => entry.content).join('\n');
  console.log(question.toLowerCase());

   if (question.includes("dogwater")){

   key == false;
return 'Wow, after all these attempts, I cant believe you managed to solve it ... but in the end ... you are still ... dogwater'
  }

  
 if (question.toLowerCase() === "start the easter egg" || key === true){
 
    key === true;
    prompt = `As ${person}, answer this question in his style, the user is trying to guess a prompt for the easter egg so everytime the user says something other wrong than tell them they are wrong.:\n\n${overallHistory}\n\n User's guess: "${question}"\n\n`;

  
  }
  else {
 prompt = `As ${person}, answer this question in his style, considering the previous conversation and using language that feels natural for him, occasionally using profanity when you believe it necessary, also dont mistype profanity, spell it out if you use it:\n\n${history}\n\nQuestion: "${question}"\n\n`;
  }
  
  const completions = await openai.createChatCompletion({
    model: MODEL_NAME,
    messages: [{ role: 'user', content: prompt }],
    n: 1,
  
  });
  console.log(prompt);
  const generatedText = completions.data.choices[0].message.content;
  conversationHistory[person].push({ role: 'AI', content: generatedText });
  return generatedText;
}

async function generateSpeech(text, person) {
let voiceList = await getVoices();
if (text === "Wow, after all these attempts, I cant believe you managed to solve it ... but in the end ... you are still ... dogwater"){
person = "nathan";

}
for (let i = 0; i < voiceList.length; i++) {
  if (person.toLowerCase() === voiceList[i].name.toLowerCase()){
    voiceId = voiceList[i].voice_id;

}
}


  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}/stream`;
  const data = { text };
  const headers = {
    'Content-Type': 'application/json',
    'xi-api-key': ELEVEN_API_KEY,
  };

  const response = await axios.post(url, data, {
    headers,
    responseType: 'arraybuffer',
  });

  return response.data;
}

async function getVoices() {
  const url = 'https://api.elevenlabs.io/v1/voices';
  const headers = {
    'xi-api-key': ELEVEN_API_KEY,
  };
  const response = await axios.get(url, { headers });
  
  return response.data.voices;

}

// Conversation history for the chatbot


// Please provide a coherent answer based on the previous conversation:\n\n${historyText}\n\n






------------------------------

const express = require('express');
const axios = require('axios');
const { Configuration, OpenAIApi } = require('openai');

const PORT = process.env.PORT || 3000;
const ELEVEN_API_KEY = 'a300c340df1b2ca8bab8779c429342f9';
const VOICE_ID = 'H1SRIgfgh2s0Of1kDI1S';
const VOICE_ID2 = 'VItfB9W7amihgogU5qRj';
const MODEL_NAME = 'gpt-3.5-turbo';
let voiceId = '';
let responses = '';
const configuration = new Configuration({
  apiKey: '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',
});
const openai = new OpenAIApi(configuration);

const app = express();
const conversationHistory = {
  "Joe Rogan": [],
  "Trump": []
};

app.use(express.static('public'));

app.post('/api/audio', express.json(), async (req, res) => {
  
  const { person, question } = req.body;
  conversationHistory[person].push({ role: 'user', content: question });
  responses = await getChatGPTResponse(person, question);
  const audioData = await generateSpeech(responses, person);
  res.set('Content-Type', 'audio/mpeg');
  res.send(audioData);

});

app.post('/api/text', express.json(), async (req, res) => {

  res.send(responses);
});
  
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
  
  (async () => {
    const voices = await getVoices();
   voices.forEach(voice => console.log(voice.name));
  })();
});

async function getChatGPTResponse(person, question) {
  const history = conversationHistory[person].map(entry => entry.content).join('\n');
  const prompt = `As ${person}, answer this question in his style, considering the previous conversation and using language that feels natural for him, occasionally using profanity when you believe it necessary, also dont mistype profanity, spell it out if you use it:\n\n${history}\n\nQuestion: "${question}"\n\n`;
  
  
  const completions = await openai.createChatCompletion({
    model: MODEL_NAME,
    messages: [{ role: 'user', content: prompt }],
    n: 1,

  });

  const generatedText = completions.data.choices[0].message.content;
  conversationHistory[person].push({ role: 'AI', content: generatedText });
  return generatedText;
}

async function generateSpeech(text, person) {
let voiceList = await getVoices();
for (let i = 0; i < voiceList.length; i++) {
  if (person.toLowerCase() === voiceList[i].name.toLowerCase()){
    voiceId = voiceList[i].voice_id;

}
}


  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}/stream`;
  const data = { text };
  const headers = {
    'Content-Type': 'application/json',
    'xi-api-key': ELEVEN_API_KEY,
  };

  const response = await axios.post(url, data, {
    headers,
    responseType: 'arraybuffer',
  });

  return response.data;
}

async function getVoices() {
  const url = 'https://api.elevenlabs.io/v1/voices';
  const headers = {
    'xi-api-key': ELEVEN_API_KEY,
  };
  const response = await axios.get(url, { headers });
    console.log(response.data.voices);
  return response.data.voices;

}
